function Window_on_loaddisabled() { 
try{
if (!window.bLoadTimeDone){
if (window.bActivMonitoring) profilerData.postData(); 
putTime(); 
}
} catch(e) {}       
}
o_onLoadPush("Window_on_loaddisabled()");
function globalTimeoutExpired() {
try{ 
var aDocImage = window.document.images; 
for( var i = 0; i<aDocImage.length; i++ ) {
var hImg = aDocImage[i];
if (  hImg.complete == false ) {
stopDownloaddisabledTimer(hImg);  
}
}
return true;
} catch (e){}
}
function stopDownloaddisabledTimer(hImg) {
try{
if ( hImg.complete == false ){
if (hImg.lowsrc) hImg.src = hImg.lowsrc;
else hImg.src = "httpdisabled://hp3.a.woopic.com/I/z.gif";
}
if (hImg.clockId) clearTimeout(hImg.clockId);
hImg.clockId = null;
return true;
} catch (e) {}
}
function startDownloaddisabledTimers() {
try{
var aDocImg = window.document.images;
for( var i=0; i<aDocImg.length; i++ ) {
var hImg = aDocImg[i];
if ( hImg.id && hImg.attributes["timeout"] && hImg.complete == false ) {
var nTimeout = hImg.attributes["timeout"].value * 1; 
hImg.clockId = setTimeout( "stopDownloaddisabledTimer( o_hGetById('" + hImg.id + "') );", nTimeout * 1000 );
}
}
setTimeout( "globalTimeoutExpired();", nDownloaddisabledImgTimeout * 1000 ); 
return true;
} catch (e){}
}
function initUrlReferrer(){
try{
if (! window.sUrlReferrer ) sUrlReferrer ="HPCPSP"; 
var nHour = (new Date()).getHours();    
var sPeriod = '0003';
if  ( nHour <= 3 ) sPeriod = '0003'; 
else if ( nHour <= 6 ) sPeriod = '0306'; 
else if ( nHour <= 9 ) sPeriod = '0609'; 
else if ( nHour <= 12) sPeriod = '0912'; 
else if ( nHour <= 15) sPeriod = '1215'; 
else if ( nHour <= 18) sPeriod = '1518'; 
else if ( nHour <= 21) sPeriod = '1821'; 
else      sPeriod = '2124'; 
sUrlReferrer = sUrlReferrer +'_'+ sPeriod ;
return true;
} catch (e){}
}
function createFooter(whereId,footer_simple_js){
whereId = whereId||'o_content';
var where = document.getElementById(whereId)||false;
if(!where){ return false;}
var linkLogoFT = '<a href="httpdisabled://r.orange.fr/r/Eft" target="_blank" class="logoFT"><img src="'+static_server_a+'/I/foot-logo-FT.gif" alt="France Telecom" title="France Telecom" width="21" height="23"></a>';
var linkLogoNetPlus = '<a href="httpdisabled://r.orange.fr/r/Enetplussur" target="_blank" class="netPlusSur"><img src="'+static_server_b+'/I/foot-logo-netSur.gif" alt="logo Net Sur" title="logo Net Sur" width="28" height="28"></a>';
var footDiv = document.createElement('DIV');
footDiv.id = 'o_footer';
footDiv.setAttribute('addRef','footer_footersimple');
footDiv.innerHTML = linkLogoFT + linkLogoNetPlus;
var list = document.createElement('UL');
var i=0;
for(i in footer_simple_js){
var item = document.createElement('LI');
item.className = "l_"+i;
var link = document.createElement('A');
link.href = footer_simple_js[i].href;
link.target = footer_simple_js[i].target||'_self';
link.innerHTML = footer_simple_js[i].innerHTML;
if (typeof footer_simple_js[i].target && footer_simple_js[i].target == '_blank'){
link.title = link.innerHTML+' (nouvelle fenêtre)';
}
if (typeof footer_simple_js[i].popup != "undefined"){
link.onclick = function(e){
if (!e) var e = window.event;
o_popup((e.target)?e.target.href:e.srcElement.href,'wname = Infos, width=700, height=800');
return false;
};
link.onkeypress = function(e){
if (!e) var e = window.event;
if ((e.keyCode && e.keyCode != 9) || (e.which && e.which != 9)){
o_popup((e.target)?e.target.href:e.srcElement.href,'wname = Infos, width=700, height=800');
return false;
}
};
}
item.appendChild(link);
list.appendChild(item);
}
footDiv.appendChild(list);
where.appendChild(footDiv);
}
function chgClass(oNode,sClassName,sMainClassName){
var sMainClassName = sMainClassName || "";
if (oNode){
oNode.className = sMainClassName + " " +sClassName;
}
}
hitch = function(ctx,method,args){
args = args || [];
if (typeof method == "string" && ctx[method]){
return function(){ 
for (var i=0; i<arguments.length; i++){
args.push(arguments[i]);
}
return ctx[method].apply(ctx, args);
};
}
};
var libelM = false;
function switchM(h){
if(!libelM){
libelM = document.getElementById('libel');
}
chgClass(h.parentNode.parentNode,h.className, 'bord');
libelM.innerHTML = h.title;
}
function nextNode(element){
element = element.nextSibling;
while (element.nodeType != 1) element = element.nextSibling;
return element;
}
function findPosition(element){
var posX = 0, posY = 0;
do {
posX += element.offsetLeft;
posY += element.offsetTop;
element = element.offsetParent;
} while( element != null );
return {'x':posX,'y':posY};
}
function PopinManager (arguments){
this.popinItems = {};
this.getPopin = function(arguments){
if (!arguments) arguments = {};
var element = arguments.element || null;
if (element){   
arguments.id = arguments.id || "popin";
if (!this.popinItems[arguments.id]){
this.popinItems[arguments.id] = new Popin(arguments);
}
this.popinItems[arguments.id].element = element;
this.popinItems[arguments.id].shiftX = arguments.shiftX;
this.popinItems[arguments.id].shiftY = arguments.shiftY;
this.popinItems[arguments.id].addCloseEvents(element);
this.popinItems[arguments.id].setPosition(element);
this.popinItems[arguments.id].display(arguments.content);
}
}
}
var popinManager = new PopinManager(); 
function Popin (arguments){
this.element  = arguments.element;
this.content  = arguments.content;
this.classCss  = arguments.classCss || "popin";
this.shiftX   = arguments.shiftX || 0;
this.shiftY   = arguments.shiftY || 0;
this.manualClose = arguments.manualClose || false;
this.id    = arguments.id;
this.init = function(){
this.popin = document.createElement("div");
this.popin.id = this.id;
this.popinHead  = document.createElement("div");
this.popinHead.className = "pHead";
this.popinContent = document.createElement("div");
this.popinContent.className = "pContent";
this.popinFooter = document.createElement("div");
this.popinFooter.className = "pFooter";
this.popin.appendChild(this.popinHead);
this.popin.appendChild(this.popinContent);
this.popin.appendChild(this.popinFooter);
if (this.manualClose){
var closeImg = document.createElement("IMG");
closeImg.src = "httpdisabled://c.orange.fr/Icons/o_close.gif";
closeImg.title = "Fermer la popin";
var that = this;
if (document.all){
closeImg.attachEvent('onclick', function(){ that.hide();});
} else {
closeImg.addEventListener('click', function(){ that.hide();}, false);
}
this.popinHead.appendChild(closeImg);
}
this.popin.className = this.classCss;
document.body.appendChild(this.popin);
}
this.setPosition = function(element){
var position = {'x':parseInt(element.getAttribute('x')), 'y':parseInt(element.getAttribute('y'))};
if (!position.x){
position = findPosition(element);
element.setAttribute('x',position.x);
element.setAttribute('y',position.y);
}
this.popin.style.position = "absolute";
if (!isNaN(this.shiftX)){
this.popin.style.left = position.x + this.shiftX + "px";
} else if (this.shiftX == "right"){
this.popin.style.left = position.x + element.offsetWidth + "px";
}
if (!isNaN(this.shiftY)){
this.popin.style.top = position.y + this.shiftY + "px";
} else if (this.shiftY == "bottom"){
this.popin.style.top = position.y + element.offsetHeight + "px";
}
}
this.addCloseEvents = function(element){
if (element && !this.manualClose){
var that = this;
if (document.all){
element.attachEvent('onmouseout', function(){ that.hide();});
element.attachEvent('onblur', function(){ that.hide();});
} else {
element.addEventListener('mouseout', function(){ that.hide();}, false);
element.addEventListener('blur', function(){ that.hide();}, false);
}
}
}
this.display = function(content){
this.popinContent.innerHTML = content;
this.popin.style.display = "block";
}
this.hide = function(){
this.popin.style.display = "none";
}
this.init();
}
var Hider = function(opt){
this.id = opt.id || "hider";  
this.event = opt.event || 'click'; 
this.capping = {     
'active': opt.activeCapping || false, 
'current': 0,       
'max': opt.maxCapping || 3    
}
this.addCloseBtn = opt.addCloseBtn || false; 
this.closeNode = opt.closeNode;     
this.containerNode = opt.node;     
this.cssClass = opt.cssClass || '';    
this.initialState = opt.initialState || void'; 
this.isOpen = false;       
this.min = opt.min || 0; 
this.max = opt.max || 100; 
this.step = opt.step || 2;    
this.frequence = opt.frequence || 2; 
this._timer = null;   
this._timerEffect = null; 
this.delay = {    
'close': opt.closeDelay || 0, 
void': voidDelay || 0  
}
this.init = function(){
if (this.containerNode && this.checkCapping()){
if (this.addCloseBtn){
this.closeNode = document.createElement("A");
this.closeNode.innerHTML = "fermer";
this.closeNode.className = "close";
this.containerNode.appendChild(this.closeNode);
}
switch (this.event){
case "click":
this.closeNode.onclick = hitch(this,'chgState',[null,true]);
break;
case "over":
this.closeNode.onmouseover = hitch(this,'chgState',[void']);
this.closeNode.onmouseout = hitch(this,'chgState',['close']);
break;
}
this.isOpen = this.initialState == "close";
this.chgState(this.initialState);
}
}
this.checkCapping = function(){
if (this.capping.active){
var capping = o_sGetCookie(['capping',this.id].join("_"));
this.capping.current = (capping)?(parseInt(capping)):this.capping.current;
return this.capping.current < this.capping.max;
} else {
return true;
}
}
this.setCapping = function(value){
o_bSetCookie(['capping',this.id].join("_"),value,"expires=30");
}
this.chgState = function(action,forceCapping){
action = action || ((this.isOpen)?"close":void");
forceCapping = forceCapping || false;
window.clearTimeout(this._timer);
this._timer = window.setTimeout(hitch(this,'_transition',[action,hitch(this,'_transitionEnd',[action,forceCapping])]),this.delay[action]);
}
this._transition = function(action,fct){
window.clearInterval(this._timerEffect);
this._timerEffect = window.setInterval(hitch(this,'_doTransition',[action,(action == 'close'?-this.step:this.step),fct]),this.frequence);
}
this._doTransition = function(action,step,fct){
var size = this.containerNode.offsetHeight + step;
if (action == void" && size >= this.max){
this.containerNode.style.height = this.max + "px";
if (fct) fct();
} else if (action == "close" && size <= this.min){
this.containerNode.style.height = this.min + "px";
if (fct) fct();
} else {
this.containerNode.style.height = size+"px";
}
}
this._transitionEnd = function(action,forceCapping){
window.clearInterval(this._timerEffect);
this.isOpen = action == void";
this.containerNode.className = [this.cssClass,action].join(' ');
if (this.capping.active){
if (action == void"){
this.setCapping(this.capping.current+1);
} else if (forceCapping){
this.setCapping(this.capping.max);
}
}
}
this.init();
}
var swfobject = function() {
var UNDEF = "undefined",
OBJECT = "object",
SHOCKWAVE_FLASH = "Shockwave Flash",
SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash",
FLASH_MIME_TYPE = "application/x-shockwave-flash",
EXPRESS_INSTALL_ID = "SWFObjectExprInst",
ON_READY_STATE_CHANGE = "onreadystatechange",
win = window,
doc = document,
nav = navigator,
plugin = false,
domLoadFnArr = [main],
regObjArr = [],
objIdArr = [],
listenersArr = [],
storedAltContent,
storedAltContentId,
storedCallbackFn,
storedCallbackObj,
isDomLoaded = false,
isExpressInstallActive = false,
dynamicStylesheet,
dynamicStylesheetMedia,
autoHideShow = true,
ua = function() {
var w3cdom = typeof doc.getElementById != UNDEF && typeof doc.getElementsByTagName != UNDEF && typeof doc.createElement != UNDEF,
u = nav.userAgent.toLowerCase(),
p = nav.platform.toLowerCase(),
windows = p ? /win/.test(p) : /win/.test(u),
mac = p ? /mac/.test(p) : /mac/.test(u),
webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, 
ie = !+"\v1", 
playerVersion = [0,0,0],
d = null;
if (typeof nav.plugins != UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] == OBJECT) {
d = nav.plugins[SHOCKWAVE_FLASH].description;
if (d && !(typeof nav.mimeTypes != UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && !nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) { 
plugin = true;
ie = false; 
d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
playerVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
playerVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
playerVersion[2] = /[a-zA-Z]/.test(d) ? parseInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0;
}
}
else if (typeof win.ActiveXObject != UNDEF) {
try {
var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);
if (a) { 
d = a.GetVariable("$version");
if (d) {
ie = true; 
d = d.split(" ")[1].split(",");
playerVersion = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
}
}
}
catch(e) {}
}
return { w3:w3cdom, pv:playerVersion, wk:webkit, ie:ie, win:windows, mac:mac };
}(),
onDomLoad = function() {
if (!ua.w3) { return; }
if ((typeof doc.readyState != UNDEF && doc.readyState == "complete") || (typeof doc.readyState == UNDEF && (doc.getElementsByTagName("body")[0] || doc.body))) { 
callDomLoadFunctions();
}
if (!isDomLoaded) {
if (typeof doc.addEventListener != UNDEF) {
doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, false);
}  
if (ua.ie && ua.win) {
doc.attachEvent(ON_READY_STATE_CHANGE, function() {
if (doc.readyState == "complete") {
doc.detachEvent(ON_READY_STATE_CHANGE, arguments.callee);
callDomLoadFunctions();
}
});
if (win == top) { 
(function(){
if (isDomLoaded) { return; }
try {
doc.documentElement.doScroll("left");
}
catch(e) {
setTimeout(arguments.callee, 0);
return;
}
callDomLoadFunctions();
})();
}
}
if (ua.wk) {
(function(){
if (isDomLoaded) { return; }
if (!/loaddisableded|complete/.test(doc.readyState)) {
setTimeout(arguments.callee, 0);
return;
}
callDomLoadFunctions();
})();
}
addLoadEvent(callDomLoadFunctions);
}
}();
function callDomLoadFunctions() {
if (isDomLoaded) { return; }
try { 
var t = doc.getElementsByTagName("body")[0].appendChild(createElement("span"));
t.parentNode.removeChild(t);
}
catch (e) { return; }
isDomLoaded = true;
var dl = domLoadFnArr.length;
for (var i = 0; i < dl; i++) {
domLoadFnArr[i]();
}
}
function addDomLoadEvent(fn) {
if (isDomLoaded) {
fn();
}
else { 
domLoadFnArr[domLoadFnArr.length] = fn; 
}
}
function addLoadEvent(fn) {
if (typeof win.addEventListener != UNDEF) {
win.addEventListener("loaddisabled", fn, false);
}
else if (typeof doc.addEventListener != UNDEF) {
doc.addEventListener("loaddisabled", fn, false);
}
else if (typeof win.attachEvent != UNDEF) {
addListener(win, "onloaddisabled", fn);
}
else if (typeof win.onloaddisabled == "function") {
var fnOld = win.onloaddisabled;
win.onloaddisabled = function() {
fnOld();
fn();
};
}
else {
win.onloaddisabled = fn;
}
}
function main() { 
if (plugin) {
testPlayerVersion();
}
else {
matchVersions();
}
}
function testPlayerVersion() {
var b = doc.getElementsByTagName("body")[0];
var o = createElement(OBJECT);
o.setAttribute("type", FLASH_MIME_TYPE);
var t = b.appendChild(o);
if (t) {
var counter = 0;
(function(){
if (typeof t.GetVariable != UNDEF) {
var d = t.GetVariable("$version");
if (d) {
d = d.split(" ")[1].split(",");
ua.pv = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
}
}
else if (counter < 10) {
counter++;
setTimeout(arguments.callee, 10);
return;
}
b.removeChild(o);
t = null;
matchVersions();
})();
}
else {
matchVersions();
}
}
function matchVersions() {
var rl = regObjArr.length;
if (rl > 0) {
for (var i = 0; i < rl; i++) { 
var id = regObjArr[i].id;
var cb = regObjArr[i].callbackFn;
var cbObj = {success:false, id:id};
if (ua.pv[0] > 0) {
var obj = getElementById(id);
if (obj) {
if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) { 
setVisibility(id, true);
if (cb) {
cbObj.success = true;
cbObj.ref = getObjectById(id);
cb(cbObj);
}
}
else if (regObjArr[i].expressInstall && canExpressInstall()) { 
var att = {};
att.data = regObjArr[i].expressInstall;
att.width = obj.getAttribute("width") || "0";
att.height = obj.getAttribute("height") || "0";
if (obj.getAttribute("class")) { att.styleclass = obj.getAttribute("class"); }
if (obj.getAttribute("align")) { att.align = obj.getAttribute("align"); }
var par = {};
var p = obj.getElementsByTagName("param");
var pl = p.length;
for (var j = 0; j < pl; j++) {
if (p[j].getAttribute("name").toLowerCase() != "movie") {
par[p[j].getAttribute("name")] = p[j].getAttribute("value");
}
}
showExpressInstall(att, par, id, cb);
}
else { 
displayAltContent(obj);
if (cb) { cb(cbObj); }
}
}
}
else { 
setVisibility(id, true);
if (cb) {
var o = getObjectById(id); 
if (o && typeof o.SetVariable != UNDEF) { 
cbObj.success = true;
cbObj.ref = o;
}
cb(cbObj);
}
}
}
}
}
function getObjectById(objectIdStr) {
var r = null;
var o = getElementById(objectIdStr);
if (o && o.nodeName == "OBJECT") {
if (typeof o.SetVariable != UNDEF) {
r = o;
}
else {
var n = o.getElementsByTagName(OBJECT)[0];
if (n) {
r = n;
}
}
}
return r;
}
function canExpressInstall() {
return !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);
}
function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {
isExpressInstallActive = true;
storedCallbackFn = callbackFn || null;
storedCallbackObj = {success:false, id:replaceElemIdStr};
var obj = getElementById(replaceElemIdStr);
if (obj) {
if (obj.nodeName == "OBJECT") { 
storedAltContent = abstractAltContent(obj);
storedAltContentId = null;
}
else { 
storedAltContent = obj;
storedAltContentId = replaceElemIdStr;
}
att.id = EXPRESS_INSTALL_ID;
if (typeof att.width == UNDEF || (!/%$/.test(att.width) && parseInt(att.width, 10) < 310)) { att.width = "310"; }
if (typeof att.height == UNDEF || (!/%$/.test(att.height) && parseInt(att.height, 10) < 137)) { att.height = "137"; }
doc.title = doc.title.slice(0, 47) + " - Flash Player Installation";
var pt = ua.ie && ua.win ? "ActiveX" : "PlugIn",
fv = "MMredirectURL=" + win.location.toString().replace(/&/g,"%26") + "&MMplayerType=" + pt + "&MMdoctitle=" + doc.title;
if (typeof par.flashvars != UNDEF) {
par.flashvars += "&" + fv;
}
else {
par.flashvars = fv;
}
if (ua.ie && ua.win && obj.readyState != 4) {
var newObj = createElement("div");
replaceElemIdStr += "SWFObjectNew";
newObj.setAttribute("id", replaceElemIdStr);
obj.parentNode.insertBefore(newObj, obj); 
obj.style.display = "none";
(function(){
if (obj.readyState == 4) {
obj.parentNode.removeChild(obj);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
createSWF(att, par, replaceElemIdStr);
}
}
function displayAltContent(obj) {
if (ua.ie && ua.win && obj.readyState != 4) {
var el = createElement("div");
obj.parentNode.insertBefore(el, obj); 
el.parentNode.replaceChild(abstractAltContent(obj), el);
obj.style.display = "none";
(function(){
if (obj.readyState == 4) {
obj.parentNode.removeChild(obj);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
else {
obj.parentNode.replaceChild(abstractAltContent(obj), obj);
}
} 
function abstractAltContent(obj) {
var ac = createElement("div");
if (ua.win && ua.ie) {
ac.innerHTML = obj.innerHTML;
}
else {
var nestedObj = obj.getElementsByTagName(OBJECT)[0];
if (nestedObj) {
var c = nestedObj.childNodes;
if (c) {
var cl = c.length;
for (var i = 0; i < cl; i++) {
if (!(c[i].nodeType == 1 && c[i].nodeName == "PARAM") && !(c[i].nodeType == 8)) {
ac.appendChild(c[i].cloneNode(true));
}
}
}
}
}
return ac;
}
function createSWF(attObj, parObj, id) {
var r, el = getElementById(id);
if (ua.wk && ua.wk < 312) { return r; }
if (el) {
if (typeof attObj.id == UNDEF) { 
attObj.id = id;
}
if (ua.ie && ua.win) { 
var att = "";
for (var i in attObj) {
if (attObj[i] != Object.prototype[i]) { 
if (i.toLowerCase() == "data") {
parObj.movie = attObj[i];
}
else if (i.toLowerCase() == "styleclass") { 
att += ' class="' + attObj[i] + '"';
}
else if (i.toLowerCase() != "classid") {
att += ' ' + i + '="' + attObj[i] + '"';
}
}
}
var par = "";
for (var j in parObj) {
if (parObj[j] != Object.prototype[j]) { 
par += '<param name="' + j + '" value="' + parObj[j] + '" />';
}
}
el.outerHTML = '<objectdisabled classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + att + '>' + par + '</object>';
objIdArr[objIdArr.length] = attObj.id; 
r = getElementById(attObj.id); 
}
else { 
var o = createElement(OBJECT);
o.setAttribute("type", FLASH_MIME_TYPE);
for (var m in attObj) {
if (attObj[m] != Object.prototype[m]) { 
if (m.toLowerCase() == "styleclass") { 
o.setAttribute("class", attObj[m]);
}
else if (m.toLowerCase() != "classid") { 
o.setAttribute(m, attObj[m]);
}
}
}
for (var n in parObj) {
if (parObj[n] != Object.prototype[n] && n.toLowerCase() != "movie") { 
createObjParam(o, n, parObj[n]);
}
}
el.parentNode.replaceChild(o, el);
r = o;
}
}
return r;
}
function createObjParam(el, pName, pValue) {
var p = createElement("param");
p.setAttribute("name", pName); 
p.setAttribute("value", pValue);
el.appendChild(p);
}
function removeSWF(id) {
var obj = getElementById(id);
if (obj && obj.nodeName == "OBJECT") {
if (ua.ie && ua.win) {
obj.style.display = "none";
(function(){
if (obj.readyState == 4) {
removeObjectInIE(id);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
else {
obj.parentNode.removeChild(obj);
}
}
}
function removeObjectInIE(id) {
var obj = getElementById(id);
if (obj) {
for (var i in obj) {
if (typeof obj[i] == "function") {
obj[i] = null;
}
}
obj.parentNode.removeChild(obj);
}
}
function getElementById(id) {
var el = null;
try {
el = doc.getElementById(id);
}
catch (e) {}
return el;
}
function createElement(el) {
return doc.createElement(el);
}
function addListener(target, eventType, fn) {
target.attachEvent(eventType, fn);
listenersArr[listenersArr.length] = [target, eventType, fn];
}
function hasPlayerVersion(rv) {
var pv = ua.pv, v = rv.split(".");
v[0] = parseInt(v[0], 10);
v[1] = parseInt(v[1], 10) || 0; 
v[2] = parseInt(v[2], 10) || 0;
return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
}
function createCSS(sel, decl, media, newStyle) {
if (ua.ie && ua.mac) { return; }
var h = doc.getElementsByTagName("head")[0];
if (!h) { return; } 
var m = (media && typeof media == "string") ? media : "screen";
if (newStyle) {
dynamicStylesheet = null;
dynamicStylesheetMedia = null;
}
if (!dynamicStylesheet || dynamicStylesheetMedia != m) { 
var s = createElement("style");
s.setAttribute("type", "text/css");
s.setAttribute("media", m);
dynamicStylesheet = h.appendChild(s);
if (ua.ie && ua.win && typeof doc.styleSheets != UNDEF && doc.styleSheets.length > 0) {
dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];
}
dynamicStylesheetMedia = m;
}
if (ua.ie && ua.win) {
if (dynamicStylesheet && typeof dynamicStylesheet.addRule == OBJECT) {
dynamicStylesheet.addRule(sel, decl);
}
}
else {
if (dynamicStylesheet && typeof doc.createTextNode != UNDEF) {
dynamicStylesheet.appendChild(doc.createTextNode(sel + " {" + decl + "}"));
}
}
}
function setVisibility(id, isVisible) {
if (!autoHideShow) { return; }
var v = isVisible ? "visible" : "hidden";
if (isDomLoaded && getElementById(id)) {
getElementById(id).style.visibility = v;
}
else {
createCSS("#" + id, "visibility:" + v);
}
}
function urlEncodeIfNecessary(s) {
var regex = /[\\\"<>\.;]/;
var hasBadChars = regex.exec(s) != null;
return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;
}
/* Release memory to avoid memory leaks caused by closures, fix hanging audio/video threads and void sockets/NetConnections to disconnect (Internet Explorer only)
*/
var cleanup = function() {
if (ua.ie && ua.win) {
window.attachEvent("onunloaddisabled", function() {
// remove listeners to avoid memory leaks
var ll = listenersArr.length;
for (var i = 0; i < ll; i++) {
listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);
}
// cleanup dynamically embedded objects to fix audio/video threads and void sockets and NetConnections to disconnect
var il = objIdArr.length;
for (var j = 0; j < il; j++) {
removeSWF(objIdArr[j]);
}
// cleanup library's main closures to avoid memory leaks
for (var k in ua) {
ua[k] = null;
}
ua = null;
for (var l in swfobject) {
swfobject[l] = null;
}
swfobject = null;
});
}
}();
return {
/* Public API
- Reference: http://code.google.com/p/swfobject/wiki/documentation
*/ 
registerObject: function(objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {
if (ua.w3 && objectIdStr && swfVersionStr) {
var regObj = {};
regObj.id = objectIdStr;
regObj.swfVersion = swfVersionStr;
regObj.expressInstall = xiSwfUrlStr;
regObj.callbackFn = callbackFn;
regObjArr[regObjArr.length] = regObj;
setVisibility(objectIdStr, false);
}
else if (callbackFn) {
callbackFn({success:false, id:objectIdStr});
}
},
getObjectById: function(objectIdStr) {
if (ua.w3) {
return getObjectById(objectIdStr);
}
},
embedSWF: function(swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {
var callbackObj = {success:false, id:replaceElemIdStr};
if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {
setVisibility(replaceElemIdStr, false);
addDomLoadEvent(function() {
widthStr += ""; // auto-convert to string
heightStr += "";
var att = {};
if (attObj && typeof attObj === OBJECT) {
for (var i in attObj) { // copy object to avoid the use of references, because web authors often reuse attObj for multiple SWFs
att[i] = attObj[i];
}
}
att.data = swfUrlStr;
att.width = widthStr;
att.height = heightStr;
var par = {}; 
if (parObj && typeof parObj === OBJECT) {
for (var j in parObj) { // copy object to avoid the use of references, because web authors often reuse parObj for multiple SWFs
par[j] = parObj[j];
}
}
if (flashvarsObj && typeof flashvarsObj === OBJECT) {
for (var k in flashvarsObj) { // copy object to avoid the use of references, because web authors often reuse flashvarsObj for multiple SWFs
if (typeof par.flashvars != UNDEF) {
par.flashvars += "&" + k + "=" + flashvarsObj[k];
}
else {
par.flashvars = k + "=" + flashvarsObj[k];
}
}
}
if (hasPlayerVersion(swfVersionStr)) { // create SWF
var obj = createSWF(att, par, replaceElemIdStr);
if (att.id == replaceElemIdStr) {
setVisibility(replaceElemIdStr, true);
}
callbackObj.success = true;
callbackObj.ref = obj;
}
else if (xiSwfUrlStr && canExpressInstall()) { // show Adobe Express Install
att.data = xiSwfUrlStr;
showExpressInstall(att, par, replaceElemIdStr, callbackFn);
return;
}
else { // show alternative content
setVisibility(replaceElemIdStr, true);
}
if (callbackFn) { callbackFn(callbackObj); }
});
}
else if (callbackFn) { callbackFn(callbackObj); }
},
switchOffAutoHideShow: function() {
autoHideShow = false;
},
ua: ua,
getFlashPlayerVersion: function() {
return { major:ua.pv[0], minor:ua.pv[1], release:ua.pv[2] };
},
hasFlashPlayerVersion: hasPlayerVersion,
createSWF: function(attObj, parObj, replaceElemIdStr) {
if (ua.w3) {
return createSWF(attObj, parObj, replaceElemIdStr);
}
else {
return undefined;
}
},
showExpressInstall: function(att, par, replaceElemIdStr, callbackFn) {
if (ua.w3 && canExpressInstall()) {
showExpressInstall(att, par, replaceElemIdStr, callbackFn);
}
},
removeSWF: function(objElemIdStr) {
if (ua.w3) {
removeSWF(objElemIdStr);
}
},
createCSS: function(selStr, declStr, mediaStr, newStyleBoolean) {
if (ua.w3) {
createCSS(selStr, declStr, mediaStr, newStyleBoolean);
}
},
addDomLoadEvent: addDomLoadEvent,
addLoadEvent: addLoadEvent,
getQueryParamValue: function(param) {
var q = doc.location.search || doc.location.hash;
if (q) {
if (/\?/.test(q)) { q = q.split("?")[1]; } // strip question mark
if (param == null) {
return urlEncodeIfNecessary(q);
}
var pairs = q.split("&");
for (var i = 0; i < pairs.length; i++) {
if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)));
}
}
}
return "";
},
// For internal usage only
expressInstallCallback: function() {
if (isExpressInstallActive) {
var obj = getElementById(EXPRESS_INSTALL_ID);
if (obj && storedAltContent) {
obj.parentNode.replaceChild(storedAltContent, obj);
if (storedAltContentId) {
setVisibility(storedAltContentId, true);
if (ua.ie && ua.win) { storedAltContent.style.display = "block"; }
}
if (storedCallbackFn) { storedCallbackFn(storedCallbackObj); }
}
isExpressInstallActive = false;
} 
}
};
}();
