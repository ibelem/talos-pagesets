/*!
 * jQuery UI 1.8.10
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function(c,j){function k(a){return!c(a).parents().andSelf().filter(function(){return c.curCSS(this,"visibility")==="hidden"||c.expr.filters.hidden(this)}).length}c.ui=c.ui||{};if(!c.ui.version){c.extend(c.ui,{version:"1.8.10",keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,
NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91}});c.fn.extend({_focus:c.fn.focus,focus:function(a,b){return typeof a==="number"?this.each(function(){var d=this;setTimeout(function(){c(d).focus();b&&b.call(d)},a)}):this._focus.apply(this,arguments)},scrollParent:function(){var a;a=c.browser.msie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(c.curCSS(this,
"position",1))&&/(auto|scroll)/.test(c.curCSS(this,"overflow",1)+c.curCSS(this,"overflow-y",1)+c.curCSS(this,"overflow-x",1))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(c.curCSS(this,"overflow",1)+c.curCSS(this,"overflow-y",1)+c.curCSS(this,"overflow-x",1))}).eq(0);return/fixed/.test(this.css("position"))||!a.length?c(document):a},zIndex:function(a){if(a!==j)return this.css("zIndex",a);if(this.length){a=c(this[0]);for(var b;a.length&&a[0]!==document;){b=a.css("position");
if(b==="absolute"||b==="relative"||b==="fixed"){b=parseInt(a.css("zIndex"),10);if(!isNaN(b)&&b!==0)return b}a=a.parent()}}return 0},disableSelection:function(){return this.bind((c.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(a){a.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}});c.each(["Width","Height"],function(a,b){function d(f,g,l,m){c.each(e,function(){g-=parseFloat(c.curCSS(f,"padding"+this,true))||0;if(l)g-=parseFloat(c.curCSS(f,
"border"+this+"Width",true))||0;if(m)g-=parseFloat(c.curCSS(f,"margin"+this,true))||0});return g}var e=b==="Width"?["Left","Right"]:["Top","Bottom"],h=b.toLowerCase(),i={innerWidth:c.fn.innerWidth,innerHeight:c.fn.innerHeight,outerWidth:c.fn.outerWidth,outerHeight:c.fn.outerHeight};c.fn["inner"+b]=function(f){if(f===j)return i["inner"+b].call(this);return this.each(function(){c(this).css(h,d(this,f)+"px")})};c.fn["outer"+b]=function(f,g){if(typeof f!=="number")return i["outer"+b].call(this,f);return this.each(function(){c(this).css(h,
d(this,f,true,g)+"px")})}});c.extend(c.expr[":"],{data:function(a,b,d){return!!c.data(a,d[3])},focusable:function(a){var b=a.nodeName.toLowerCase(),d=c.attr(a,"tabindex");if("area"===b){b=a.parentNode;d=b.name;if(!a.href||!d||b.nodeName.toLowerCase()!=="map")return false;a=c("img[usemap=#"+d+"]")[0];return!!a&&k(a)}return(/input|select|textarea|button|object/.test(b)?!a.disabled:"a"==b?a.href||!isNaN(d):!isNaN(d))&&k(a)},tabbable:function(a){var b=c.attr(a,"tabindex");return(isNaN(b)||b>=0)&&c(a).is(":focusable")}});
c(function(){var a=document.body,b=a.appendChild(b=document.createElement("div"));c.extend(b.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0});c.support.minHeight=b.offsetHeight===100;c.support.selectstart="onselectstart"in b;a.removeChild(b).style.display="none"});c.extend(c.ui,{plugin:{add:function(a,b,d){a=c.ui[a].prototype;for(var e in d){a.plugins[e]=a.plugins[e]||[];a.plugins[e].push([b,d[e]])}},call:function(a,b,d){if((b=a.plugins[b])&&a.element[0].parentNode)for(var e=0;e<b.length;e++)a.options[b[e][0]]&&
b[e][1].apply(a.element,d)}},contains:function(a,b){return document.compareDocumentPosition?a.compareDocumentPosition(b)&16:a!==b&&a.contains(b)},hasScroll:function(a,b){if(c(a).css("overflow")==="hidden")return false;b=b&&b==="left"?"scrollLeft":"scrollTop";var d=false;if(a[b]>0)return true;a[b]=1;d=a[b]>0;a[b]=0;return d},isOverAxis:function(a,b,d){return a>b&&a<b+d},isOver:function(a,b,d,e,h,i){return c.ui.isOverAxis(a,d,h)&&c.ui.isOverAxis(b,e,i)}})}})(jQuery);
/*!
 * jQuery UI Widget 1.8.10
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function(b,j){if(b.cleanData){var k=b.cleanData;b.cleanData=function(a){for(var c=0,d;(d=a[c])!=null;c++)b(d).triggerHandler("remove");k(a)}}else{var l=b.fn.remove;b.fn.remove=function(a,c){return this.each(function(){if(!c)if(!a||b.filter(a,[this]).length)b("*",this).add([this]).each(function(){b(this).triggerHandler("remove")});return l.call(b(this),a,c)})}}b.widget=function(a,c,d){var e=a.split(".")[0],f;a=a.split(".")[1];f=e+"-"+a;if(!d){d=c;c=b.Widget}b.expr[":"][f]=function(h){return!!b.data(h,
a)};b[e]=b[e]||{};b[e][a]=function(h,g){arguments.length&&this._createWidget(h,g)};c=new c;c.options=b.extend(true,{},c.options);b[e][a].prototype=b.extend(true,c,{namespace:e,widgetName:a,widgetEventPrefix:b[e][a].prototype.widgetEventPrefix||a,widgetBaseClass:f},d);b.widget.bridge(a,b[e][a])};b.widget.bridge=function(a,c){b.fn[a]=function(d){var e=typeof d==="string",f=Array.prototype.slice.call(arguments,1),h=this;d=!e&&f.length?b.extend.apply(null,[true,d].concat(f)):d;if(e&&d.charAt(0)==="_")return h;
e?this.each(function(){var g=b.data(this,a),i=g&&b.isFunction(g[d])?g[d].apply(g,f):g;if(i!==g&&i!==j){h=i;return false}}):this.each(function(){var g=b.data(this,a);g?g.option(d||{})._init():b.data(this,a,new c(d,this))});return h}};b.Widget=function(a,c){arguments.length&&this._createWidget(a,c)};b.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",options:{disabled:false},_createWidget:function(a,c){b.data(c,this.widgetName,this);this.element=b(c);this.options=b.extend(true,{},this.options,
this._getCreateOptions(),a);var d=this;this.element.bind("remove."+this.widgetName,function(){d.destroy()});this._create();this._trigger("create");this._init()},_getCreateOptions:function(){return b.metadata&&b.metadata.get(this.element[0])[this.widgetName]},_create:function(){},_init:function(){},destroy:function(){this.element.unbind("."+this.widgetName).removeData(this.widgetName);this.widget().unbind("."+this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass+"-disabled ui-state-disabled")},
widget:function(){return this.element},option:function(a,c){var d=a;if(arguments.length===0)return b.extend({},this.options);if(typeof a==="string"){if(c===j)return this.options[a];d={};d[a]=c}this._setOptions(d);return this},_setOptions:function(a){var c=this;b.each(a,function(d,e){c._setOption(d,e)});return this},_setOption:function(a,c){this.options[a]=c;if(a==="disabled")this.widget()[c?"addClass":"removeClass"](this.widgetBaseClass+"-disabled ui-state-disabled").attr("aria-disabled",c);return this},
enable:function(){return this._setOption("disabled",false)},disable:function(){return this._setOption("disabled",true)},_trigger:function(a,c,d){var e=this.options[a];c=b.Event(c);c.type=(a===this.widgetEventPrefix?a:this.widgetEventPrefix+a).toLowerCase();d=d||{};if(c.originalEvent){a=b.event.props.length;for(var f;a;){f=b.event.props[--a];c[f]=c.originalEvent[f]}}this.element.trigger(c,d);return!(b.isFunction(e)&&e.call(this.element[0],c,d)===false||c.isDefaultPrevented())}}})(jQuery);
/*!
 * LiveJournal Bubble
 *
 * Copyright 2011, sergey.zhirkov@sup.com
 *
 * http://docs.jquery.com/UI
 * 
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *
 * Usage:
 *	<script>$('div.with-bubble-content').bubble({ many: options }).bubble('publicMethod').bubble('option', 'getOptionName').bubble('option', 'setOptionName', 'setOptionValue');</script>
 */

(function ($, window) {

	var LJBubble = {
		
		options: {
			target: null,
			currentTarget: null,
			targetId: 0,
			
			innerHtml: '',
			outerHtml: '' +
				'<div class="b-popup" style="display: none;">' +
					'<div class="b-popup-outer">' +
						'<div class="b-popup-inner">' +
							'<div class="b-popup-innerhtml"></div>' +
							'<i class="i-popup-arr i-popup-arrtl"></i>' +
							'<i class="i-popup-close"></i>' +
						'</div>' +
					'</div>' +
				'</div>',
			
			position: {
				x: 0,
				y: 0
			},
			
			// align bubble relative to target elem
			alignX: 'auto', // auto || left || center
			alignY: 'auto', // auto || top || bottom
			
			closeControl: true,
			closeOnContentClick: false,
			closeOnDocumentClick: true,
			toggleOnTargetClick: true,
			
			bubbleNode: {},
			bubbleArrow: {},
			innerHtmlContainer: {},
			
			positionClassNamePrefix: 'i-popup-arr',
			arrowDefaultClassName: 'i-popup-arr',
			withCloseControlClassName: 'b-popup-withclosecontrol',
			noCloseControlClassName: 'b-popup-noclosecontrol',
			
			selectors: {
				bubbleNode: '.b-popup',
				bubbleArrow: 'i.i-popup-arr',
				innerHtmlContainer: 'div.b-popup-innerhtml',
				closeControl: 'i.i-popup-close'
			}
		},
		
		
		// private methods
		
		_create: function () {
			var ljBubble = this,
				options = ljBubble.options,
				selectors = options.selectors;

			// wrap bubble content with bubble outer html
			ljBubble._makeNode();
			
			// define base options
			ljBubble.option('closeControl', options.closeControl);
			ljBubble.option('target', $(options.target));

			ljBubble._bindEvents();
		},
		
		_setOption: function (option, value) {
			var ljBubble = this,
				options = ljBubble.options;

			options[option] = value;
			
			switch (option) {
				case 'closeControl':
					options.bubbleNode.addClass((value) ? options.withCloseControlClassName : options.noCloseControlClassName);
				break;
				case 'position':
					options.bubbleNode.css({
						left: value.x,
						top: value.y
					});
				break;
			}
		},
		
		_makeNode: function () {
			var	bubbleNode = $(this.options.outerHtml),
				innerHtmlContainer = bubbleNode.find(this.options.selectors.innerHtmlContainer);
				
			this.element.css('display', 'block').appendTo(innerHtmlContainer);
			
			bubbleNode.prependTo('body');
			
			this.option('bubbleNode', bubbleNode);
			this.option('bubbleArrow', bubbleNode.find(this.options.selectors.bubbleArrow));
		},
		
		_bindEvents: function () {
			var ljBubble = this,
				options = ljBubble.options;
			
			if (options.toggleOnTargetClick) {
				options.target.bind('click', function (event) {
					var target = $(this);
					
					event.preventDefault();
					event.stopPropagation();
					
					ljBubble.show(target);
				});
			}
			
			options.bubbleNode.delegate(options.selectors.closeControl, 'click', function (event) {
				ljBubble.hide();
			});
			
			if (options.closeOnDocumentClick) {
				$(document).bind('click keydown', function (event) {
					if (event.type == 'keydown' && event.keyCode != 27 /* escape */) {
						return;
					}
					
					if (options.currentTarget && event.target !== options.currentTarget[0]) {
						ljBubble.hide();
					}
				});
				
				if (!options.closeOnContentClick) {
					options.bubbleNode.bind('click', function (event) {
						event.stopPropagation();
					});
				}				
			}
		},
		
		_getPosition: function (targetControl) {
			targetControl = targetControl || this.options.currentTarget;
			
			var	ljBubble = this,
				options = ljBubble.options,
				alignX = options.alignX,
				alignY = options.alignY,
			
				viewport = $(window),
				viewportWidth = viewport.width(),
				viewportHeight = viewport.height(),
				
				elem = options.bubbleNode,
				elemWidth = elem.width(),
				elemHeight = elem.height(),
				
				popupArrow = options.bubbleArrow,
				popupArrowLeft = 30, // TODO: should be defined in css
				popupArrowTop = popupArrow.offset().top,
				
				targetOffset = targetControl.offset(),
				scrollOffset = viewport.scrollTop(),
				
				leftX = (alignX == 'auto' || alignX == 'center') ? targetOffset.left + (targetControl.width() / 2) - popupArrowLeft - (popupArrow.width() / 2) : targetOffset.left,
				rightX = targetOffset.left + (targetControl.width() / 2) - (elemWidth - popupArrowLeft - popupArrow.width() / 2) + 2,
				topY = targetOffset.top - scrollOffset + popupArrow.height() + popupArrowTop + targetControl.height(),
				bottomY = targetOffset.top + scrollOffset - popupArrow.height() - popupArrowTop - elemHeight,
				
				arrowPositionType = {
					x: 'l', // left
					y: 't' // top
				},
				arrowPositionTypes = {
					'tl': { x: leftX, y: topY },
					'tr': { x: rightX, y: topY },
					'bl': { x: leftX, y: bottomY },
					'br': { x: rightX, y: bottomY }
				},
				
				position,
				
				checkAngle = {
					x: leftX + elemWidth,
					y: topY + elemHeight
				};			
				
			if ((alignX == 'auto' || alignX == 'center') && checkAngle.x > viewportWidth) {
				arrowPositionType.x = 'r'; // right
			}
			
			if ((alignY == 'auto' && checkAngle.y > viewportHeight + viewport.scrollTop()) || (alignY == 'top')) {
				arrowPositionType.y = 'b'; // bottom
			}
			
			arrowPositionType = arrowPositionType.y + arrowPositionType.x;
			
			popupArrow
				.removeClass()
				.addClass(options.arrowDefaultClassName)
				.addClass(options.positionClassNamePrefix + arrowPositionType);
			
			position = arrowPositionTypes[arrowPositionType]; 
			
			return {
				x: Math.floor(position.x),
				y: Math.floor(position.y)
			};
		},
		
		_updatePosition: function () {
			var newPosition = this._getPosition();
			this.option('position', newPosition);
		},
		

		// public methods
		
		show: function (target) {
			var ljBubble = this,
				options = ljBubble.options;
				
			target = (target) ? $(target) : options.target;
			
			$(options.selectors.bubbleNode).hide();
			
			if (options.bubbleNode.filter(':visible').length === 0) {
				ljBubble.option('currentTarget', target);
				ljBubble._updatePosition();

				options.bubbleNode.show();
			}
			
			ljBubble._trigger('show');
			
			return this;
		},
		
		hide: function () {
			this.options.bubbleNode.hide();
			
			this._trigger('hide');
			
			return this;
		}

	};
	
	$.widget('lj.bubble', LJBubble);
	
})(jQuery, this);
jQuery(function($){
	!document.getElementById('lj_controlstrip') &&
	!document.getElementById('lj_controlstrip_new') &&
		$.get(LiveJournal.getAjaxUrl('controlstrip'),
			{ user: Site.currentJournal },
			function(data)
			{
				$(data).appendTo(document.body).ljAddContextualPopup();
			}
		);
});

(function( $, top ) {

var ControlStrip = top.ControlStrip = {};

var CONFIG = {
	rootSelector: ".w-cs",
	overlaysSelectors: [".w-cs-share", ".w-cs-filter", ".w-cs-i-calendar", ".w-cs-i-like"],
	showOverlayClass: "w-cs-hover",
	calendarSelector: ".w-cs-i-calendar"
}

var options, elements;

ControlStrip.init = function( o ) {
	options = $.extend( {}, CONFIG, o );

	elements = {
		root: $( options.rootSelector ),
		calendar: $( options.calendarSelector ),
		overlays: $( options.overlaysSelectors.join(',') )
	}

	elements.root.find('input')
		.filter('[type=\'text\']').labeledPlaceholder().end()
		.filter('[type=\'password\']').labeledPlaceholder().end();

	ControlStrip.initOverlays( elements.overlays );
	if( elements.calendar.size() > 0 ) {
		var d = new Date().setFullYear( 2010, 7, 15 );
		ControlStrip.Calendar.call( elements.calendar );
	}
}

ControlStrip.initOverlays = function( nodes ) {
	nodes.removeClass( options.showOverlayClass );

	nodes.each( function() {
		var $this = $( this ),
			outTimer = null;

		$this.mouseover( function() {
			nodes.removeClass( options.showOverlayClass );
			$this.addClass( options.showOverlayClass );
			clearTimeout( outTimer );
		} )
		.mouseout( function() {
			outTimer = setTimeout( function() {
				$this.removeClass( options.showOverlayClass );
			}, 600 );
		} );

		$this.mousedown( function( ev ) {
			ev.stopPropagation();
		} );

		$this.children( 'a' ).click( function( ev ) {
			ev.stopPropagation();
			ev.preventDefault();
		} );

	} );

	jQuery( document ).mousedown(function( ev ) {
		nodes.removeClass( options.showOverlayClass );
		ev.stopPropagation();
	} );
};

ControlStrip.Calendar = function( o ) {
	o = o || {};

	if( ControlStrip.Calendar.MonthNames ) {
		o.monthNames = ControlStrip.Calendar.MonthNames;
	}

	if( ControlStrip.Calendar.StartAtSunday ) {
		o.startAtSunday = ControlStrip.Calendar.StartAtSunday;
	}

	/*
	var onFetch = function( onloaddisabled ) {
		jQuery.getJSON( LiveJournal.getAjaxUrl('get_posting_days'),
			{ journal: Site.currentJournal }, onloaddisabled );
	}
	*/
	this.calendar( {
		//onFetch: onFetch,
		dayRef: Site.remoteJournalBase + "/friends/?date=%Y-%M-%D",
		allRefs: true,
		activeUntil: new Date(),
		startMonth: new Date( 1999, 3, 1 ),
		endMonth: new Date()
	} );
};

}( jQuery, window ));
jQuery(function() {
	var fbInput = $('repost_facebook'),
		thumb = $('repost_facebook_thumbnail'),
		selectUpdate = $('select-fb-thumbnail'),
		selectComments = $('select-fb-thumbnail-comments'),
		userPic = $('userpic_preview_image'),
		selectWindow = $('fbimg_select_window'),
		selectNav = $('fbimg_select_window_nav'),
		select = selectUpdate || selectComments;

	var noThumb = "nothumb";
	var userpicVal = "userpic";

	if(select == null) {
		return;
	}

	var options = {};
	if(selectUpdate) {
		options = {
			getText: function() {
				return getPostText('draft');
			},
			getUserPic: function() {
				return (userPic) ? userPic.src : "";
			}
		};
	}
	else {
		options = {
			getText: function() {
				var txtArea = $('commenttext') || $('body');
				return txtArea.value;
			},
			getUserPic: function() {
				var upicSelect = jQuery('#userpics > [name=prop_picture_keyword]');
				if(upicSelect.length == 0) {
					upicSelect = jQuery('#prop_picture_keyword');
				}

				if(upicSelect.length == 0) {
					return "";
				}

				var val = upicSelect.val();

				if(val in userpicmap) {
					return userpicmap[val];
				}

				return defaultpicurl || "";
			}
		};
	}

	var selectPopup = {
		init: function() {
			voided = false;
			this.page = 1;
			this.totalImages = 1;
			this.pager = {
				prev: jQuery(selectNav).children('.i-repost-nav-prev'),
				next: jQuery(selectNav).children('.i-repost-nav-next'),
				counter: jQuery(selectNav).children('.i-repost-nav-counter')
			};
			this.listWrapper = jQuery(selectWindow).children('.b-repost-pics-wrapper');
			this.list = this.listWrapper.children('.b-repost-pics-items');
			this.pagerSize = 4;
			this.pagesNum = 1;
			this.cellWidth = 0;

			this.pager.prev.click(function(){ selectPopup.changePage(-1)});
			this.pager.next.click(function(){ selectPopup.changePage(1)});

			this.firstLi = this.list.children('span:first').click(function() {
					selectPopup.setPicture(noThumb);
			});
		},

		setPicture: function(url) {
			thumb.value = url;
			this.close();
		},

		updatePager: function() {
			selectNav.style.display = (this.totalImages < this.pagerSize)?"none":"block";
			this.pager.prev[(this.page == 1)?"addClass":"removeClass"]('i-repost-nav-prev-dis');
			this.pager.next[(this.page == this.pagesNum)?"addClass":"removeClass"]('i-repost-nav-next-dis');

			this.pager.counter.html(this.page + '/' + this.pagesNum);
		},

		makeListItem: function(url, value, selected) {
			var selClass = (selected)?"b-repost-pics-active":"";

			return jQuery('<span>')
				.addClass(selClass)
				.append ( jQuery('<img>').attr('src', url) )
				.click(function () { selectPopup.setPicture(value) });
		},

	void: function(imgList) {
			this.list.children('span:gt(0)').remove();
			this.totalImages = imgList.length;
			this.page = 1;

			if((imgList.length == 0 || !jQuery.inArray(thumb.value, imgList)) && thumb.value != userpicVal && thumb.value != noThumb) {
				thumb.value = "";
			}

			var upicurl = options.getUserPic();
			if(upicurl.length > 0) {
				var userPicImg = upicurl;
				this.makeListItem(userPicImg, userpicVal, userpicVal == thumb.value).appendTo(this.list);
				this.totalImages++;
			}
			this.pagesNum = Math.ceil((this.totalImages + 1) / this.pagerSize);

			if(this.totalImages > 1 && thumb.value == "") {
				thumb.value = imgList[0];
			}

			var selected = "",
				currentPageNum = 1;
			for(var i=0; i < imgList.length; ++i) {
				if( imgList[i] == thumb.value ) {
					currentPageNum = Math.floor( (i + 1 + ((upicurl.length > 0)? 1 : 0)) / this.pagerSize ) + 1;
				}
				this.makeListItem(imgList[i], imgList[i], imgList[i] == thumb.value).appendTo(this.list);
			}

			this.firstLi[((this.totalImages <= 1 && thumb.value == "") || thumb.value == noThumb)?"addClass":"removeClass"]("b-repost-pics-active");

			selectWindow.style.display = 'block';
			voided = true;

			this.firstLi.each(function() {
				selectPopup.cellWidth = this.offsetWidth + this.offsetLeft; //calc cell width there because it's not visible on init
			});

			var wrapperWidth = (this.pagerSize > this.totalImages) ? (this.cellWidth * (this.totalImages + 1)) + "px" : "";
			this.listWrapper.css('width', wrapperWidth);
			this.changePage(currentPageNum - 1); // default page is number one, subtracting
		},

		changePage: function(num)
		{
			this.page += num;
			this.page = (this.page < 1)? 1:
						((this.page > this.pagesNum) ? this.pagesNum : this.page);

			var offset =  - this.cellWidth * (this.page - 1) * this.pagerSize;
			this.list.css('left', offset + "px");

			this.updatePager();
		},

		close: function() {
			selectWindow.style.display = 'none';
			voided = false;
		}
	}

	selectPopup.init();
	selectWindow.onmousedown = function(event) {
		event = event || window.event;
		if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;
	};

	function extractImageUrls(arr, text)
	{
		jQuery('<div>' + text + "</div>").find("img").each(function() {
				arr.push(this.src);
		});
	}

	function closeSelWindow(ev)
	{
		selectPopup.close();
	}

	select.onmousedown = function(ev) {
		ev = ev || window.event;

		if(!voided) {
			return;
		}

		if (ev.stopPropagation) ev.stopPropagation(); else ev.cancelBubble = true;
	};

	select.onclick = function(ev) {
		ev = ev || window.event;
		var urls = [];

		if(fbInput.getAttribute('disabled') === null || fbInput.getAttribute('disabled') === false) {
			if(voided) {
				closeSelWindow();
			}
			else {
				urls.length=0;
				extractImageUrls(urls, options.getText());
				void(urls);
				setTimeout(function() {	DOM.addEventListener(document, 'mousedown', closeSelWindow, false); }, 0);
			}
		}

		if(ev.preventDefault) {
			ev.preventDefault();
		}
		else {
			ev.returnValue = false;
		}
	}
});
(function( window, $ ) {

/**
* 
* Livejournal sharing script.
* 
* Usage:
* 
* .. Somewhere in the head ..
* <script type="text/javascript">
* 	//show only three links in popup by default
* 	LJShare.init({"ml":{"close":"Close","title":"Share"},"links":["facebook","twitter","email"]})
* </script>
* 
* .. Somewhere on the page ..
* <a href="#">share</a>
* <script type="text/javascript">
* 	LJShare.link( {
* 		"url":"httpdisabled://community.livejournal.com/news/750.html",
* 		"title":"Some title",
* 		"description":"Some description",
* 		"links": [ "twitter", "vkontakte", "moimir" ] //we want custom buttons there
* 	});
* </script>
*
* You can attach single links:
* LJShare.entry( { url: "httpdisabled://some.url.com/", title: "Post title", description: "Post description" } )
*		.attach( '#link_selector', 'service_name' )
*		.attach( jQuery( '#another_selector' ), 'service_name2' ) //we can pass nodes or jquery collections
*		.link( '#selector', [ "twtter", "vkontakte", "moimir"] ); //also we can attach popup
* 
*/

function preloaddisabled( srcArr ) {
	for( var i = srcArr.length; --i;
		( new Image() ).src = Site.imgprefix + srcArr[ i ] + '?v=1' );
}

function prepareOptions( opts ) {
	var defaults = {
		title: '',
		description: '',
		url: ''
	}

	var options = jQuery.extend( {}, defaults, opts );

	//we encode strings two times, because they are decoded once on the livejournal endpoint
	options.url = encodeURIComponent( encodeURIComponent( options.url ) );
	options.title = encodeURIComponent( encodeURIComponent( options.title ) );
	options.description = encodeURIComponent( encodeURIComponent( options.description ) );
	return options;
}

preloaddisabled( [
	'/popup-cls.gif',
	'/popup-arr.gif',
	'/icons/sharethis.gif'
] );

function supplant(str, o) {
	return str.replace(/{([^{}]*)}/g,
		function (a, b) {
			var r = o[b];
			return typeof r === 'string' || typeof r === 'number' ? r : a;
		}
	);
}

var selectors = {
	close: ".i-popup-close",
	links: ".b-sharethis-services a",
	arrow: ".i-popup-arr"
};

// four arrow positions availible
var arrow_opts = {
	className: "i-popup-arr",
	position: {
		tl: "i-popup-arrtl",
		tr: "i-popup-arrtr",
		bl: "i-popup-arrbl",
		br: "i-popup-arrbr"
	}
};

var template = {
	//here we take values from global_options.ml object
	start: ' \
		<div class="b-sharethis b-popup"> \
			<div class="b-popup-outer"> \
				<div class="b-popup-inner"> \
					<div class="b-sharethis-head">{title}</div> \
					<div class="b-sharethis-services">',
	//here we take values from an object made from service object. Availible vars: name, url, title.
	item: '<span class="b-sharethis-{name}"><a href="{url}" data-service={name} >{title}</a></span>',
	//here we take values from global_options.ml object
	end: '</div> \
				</div> \
				<i class="i-popup-arr i-popup-arrtl"></i><i class="i-popup-close" title="{close}"></i> \
			</div> \
		</div>'
};

//buildLink takes values passed to the url with link method ( title, post url, description )
var default_options = {
	ml: {
		close: "Close",
		title: "Share"
	},
	services: {
		livejournal: {
			title: 'LiveJournal', bindLink: 'http://www.livejournal.com/update.bml?repost={url}',voidInTab: true
		},
		facebook: {
			title: 'Facebook', bindLink: 'http://www.facebook.com/sharer.php?u={url}'
		},
		twitter: {
			title: 'Twitter', bindLink: 'http://twitter.com/share?url={url}&text={title}'
		},
		vkontakte: {
			title: 'Vkontakte', bindLink: 'http://vkontakte.ru/share.php?url={url}'
		},
		moimir: {
			title: 'Moi Mir', bindLink: 'http://connect.mail.ru/share?url={url}'
		},
		stumbleupon: {
			title: 'Stumbleupon', bindLink: 'http://www.stumbleupon.com/submit?url={url}',voidInTab: true
		},
		digg: {
			title: 'Digg', bindLink: 'http://digg.com/submit?url={url}',voidInTab: true
		},
		email: {
			title: 'E-mail', bindLink: 'http://api.addthis.com/oexchange/0.8/forward/email/offer?username=internal&url={url}', height: 600
		},
		tumblr: {
			title: 'Tumblr', bindLink: 'http://www.tumblr.com/share?v=3&u={url}'
		},
		odnoklassniki: {
			title: 'Odnoklassniki', bindLink: 'http://www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1&st._surl={url}'
		}
	},
	//list of links wich will be shown, when user will click on share link. Can be overriden in init and link methods.
	links: [ 'livejournal', 'facebook', 'twitter', 'vkontakte', 'odnoklassniki', 'moimir', 'email', 'digg', 'tumblr', 'stumbleupon' ]
};

var global_options = $.extend( true, {}, default_options );

window.LJShare = {};

/**
* Overrides default options for current page.
* 
* @param Object opts Options object, may contain the following fields:
*    ml - translation strings to use;
*    services - An Object, that contains configuration fields for services links;
*    links - array of links that will be shown to the user in popup.
*/
window.LJShare.init = function( opts ) {
	if( opts ) {
		global_options = $.extend( true, {}, default_options, opts );
		global_options.links = opts.links || global_options.links;
	}
}

/**
* Bind share popup to the latest link found on the page
* 
* @param Object opts Options object, may contain the following fields:
*    title, description, url - parameters of the page you want to share;
*    links - array of links that will be shown to the user in popup.
* @param String|Node|Jquery collection Node the popup has to be attached to. Default id a:last
*/
window.LJShare.link = function( opts, node ) {
	var link = node || jQuery( 'a:last' ),
		url = link.attr( 'href' ),
		options = prepareOptions( jQuery.extend( {}, { url: url } , opts ) ),
		dom, arrow, skipCloseEvent;

	var links = ( opts.links ) ? opts.links : global_options.links;

	function buildDom() {
		var str = supplant( template.start, global_options.ml ),
			serviceName, serviceObj;

		for( var i = 0; i < links.length; ++i ) {
			serviceName = links[i];
			serviceObj = global_options.services[ serviceName ];

			str+= supplant( template.item, {
				name: serviceName,
				title: serviceObj.title,
				url: supplant( serviceObj.bindLink, options )
			} );
		}

		str += supplant( template.end, global_options.ml );

		dom = $( str ).css( {
			position: 'absolute'
		} ).hide();
	}

	function injectDom() {
		dom.appendTo( $( document.body ) );
		arrow = dom.find( selectors.arrow );
	}

	function bindControls() {
		dom.bind( 'click', function( ev ) {
			ev.stopPropagation();
		} );

		function checkClose( e ) {
			if( !skipCloseEvent ) {
				togglePopup( false );
			}
			skipCloseEvent = false;
		}

		dom.find( selectors.close ).bind( 'click', function( ev ) { togglePopup( false ); } );
		$( document ).bind( 'click', checkClose );
		$( window ).bind( 'resize', checkClose );
		dom.find( selectors.links ).click( function( ev )
		{
			togglePopup( false );
			var service = $( this ).attr( 'data-service' );
			if( global_options.services[ service ]voidInTab ) {
				if( $.browser.msie ) {
					ev.preventDefault();
					var width = $( window ).width();
					var height = $( window ).height();
					void( this.href, null, 'toolbar=yes,menubar=yes,status=1,location=yes,scrollbars=yes,resizable=yes,width=' + width + ',height=' + height );
				} else {
					//other browsers void link in new tab
					this.target = "_blank";
				}
			} else {
				ev.preventDefault();
				var width = global_options.services[ service ].width || 640;
				var height = global_options.services[ service ].height || 480;
				void(this.href, 'sharer', 'toolbar=0,status=0,width=' + width + ',height=' + height + ',scrollbars=yes,resizable=yes');
			}
		} );
	}

	function updatePopupPosition() {
		var linkPos = link.offset(),
			linkH = link.height(), linkW = link.width(),
			arrPos = "";

		//we check if child elements of the link have bigger dimensions.
		link.find( '*' ).each( function() {
			var $this = $( this ),
				position = $this.css( 'position' ),
				height = $( this ).outerHeight();

			if( $this.is( ':visible' ) && position != 'absolute'
				&& position != 'fixed' && height > linkH ) {
				linkH = height;
			}
		} );

		dom.css( { left: "0px", top: "0px" } );

		var scrollOffset = $( window ).scrollTop();
		var upperSpace = linkPos.top - scrollOffset;
		var lowerSpace = $( window ).height() - upperSpace - linkH;
		var domH = dom.height(), domW = dom.width();

		var linkTop = Math.floor( linkPos.top ), linkLeft = Math.floor( linkPos.left );


		//we decide whether the popup should be shown under or above the link
		if( lowerSpace < domH && upperSpace > domH ) {
			linkTop -= domH + 9;
			arrPos += "b";
		} else {
			linkTop += linkH + 7;
			arrPos += "t";
		}

		//we decide whether the popup should positioned to the left or to the right from the link
		var windowW = $( window ).width();
		if( linkPos.left + domW > windowW ) {
			linkLeft = windowW - domW - 8;
			arrPos += "r";
		} else {
			arrPos += "l";
			linkLeft -= 25;
			if( linkW == 16 ) {
				linkLeft -= 4;
			}

		}

		arrow.removeClass().addClass( arrow_opts.className ).addClass( arrow_opts.position[ arrPos ] ); 

		dom.css( { left: linkLeft + "px",top: linkTop + "px" } );
	}

	function togglePopup( show ) {
		show = show || false;
		if( show ) {
			updatePopupPosition();
		}

		dom[ ( show ) ? 'show' : 'hide' ]();
	}

	link.attr( 'href', 'javascript:void(0)' )
		.click( function( ev ) {
			if( !dom ) {
				buildDom();
				injectDom();
				bindControls();
			}

			togglePopup( true );
			skipCloseEvent = true;
			ev.preventDefault();
		} );

	return this;
}

window.LJShare.entry = function( opts ) {
	var defaults = {
		title: '',
		description: '',
		url: ''
	}

	var options = prepareOptions( opts );

	return {
		attach: function( node, service ) {
			var link = jQuery( node ),
				serviceObj = global_options.services[ service ];

			if( service in global_options.services ) {
				link.each( function() {
					var url = supplant( serviceObj.bindLink, options );
					if ( voidInTab ) {
						this.url = url;
						this.target = "_blank";
					} else {
						$( this ).click( function( ev ) {
							var width = service.width || 640;
							var height = service.height || 480;
							void( url, 'sharer', 'toolbar=0,status=0,width=' + width + ',height=' + height + ',scrollbars=yes,resizable=yes');
							ev.preventDefault();
						} );
					}
				} );
			}

			return this;
		},

		link: function( node, links ) {
			var opts = jQuery.extend( {}, options, links ? { links: links } : null );
			LJShare.link( opts, ( node ) ? jQuery( node ) : null );

			return this;
		}
	}

}

} )( window, jQuery );
